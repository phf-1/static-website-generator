# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.



#########
# State #
#########


# All rules use Bash.
SHELL := bash


# One Bash process is started per rule.
.ONESHELL:


# Bash uses strict mode.
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
.SHELLFLAGS := -ceuo pipefail


# Make does not clog stdout.
.SILENT:


# https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html
.SECONDEXPANSION:


# $(call list_files, ${dir}, ${glob}) lists all files under ${dir} verifying ${glob} pattern.
define list_files
	$(shell fd -uu -t f -g $(2) $(1))
endef


# $(call objective, $objective) prints ${objective}.
define objective
	echo "┌─"
	echo "│objective: $(1)"
	echo "└─"
endef


# $(call result, $result) prints ${result}.
define result
	echo "┌─"
	echo "│result: $(1)"
	echo "└─"
endef


# ${ARTICLES} represents the parent directory of all articles.
ARTICLES := __SOURCE__


# ${INDEX_UUID} represents the uuid of the article in which articles are indexed.
INDEX_UUID := __INDEX_UUID__


# ${TEMPLATE} represents the template where each article is included to form a webpage.
TEMPLATE := template.html


# ${BUILD_DIR} represents the parent directory where the website is built.
BUILD_DIR := _build
$(shell mkdir -p ${BUILD_DIR})


# ${FONT_DIR} represents the parent directory of all font source files.
FONT_DIR := font


# ${JS_DIR} represents the parent directory of all JS source files.
JS_DIR := js


# ${TEMPLATE_DIR} represents the parent directory of all pages templates.
TEMPLATE_DIR := template


# ${CSS_DIR} represents the parent directory of all CSS source files.
CSS_DIR := css


# The actor to which a few rules are delegated.
# ${PYTHON_DIR} represents the parent directory of all Python source files.
PYTHON_DIR := python
# see: https://docs.python.org/3/howto/logging.html#when-to-use-logging
LOGLEVEL := __LOGLEVEL__
# see: ${PYTHON_DIR}/lib/actor.py
EXECUTION := __EXECUTION__
ifeq ($(EXECUTION), parallel)
MAKEFLAGS := --jobs=$(shell nproc)
MAKEFLAGS += --output-sync=recurse 
endif


ENV := PYTHONPATH=${PYTHON_DIR} EXECUTION=${EXECUTION} LOGLEVEL=${LOGLEVEL}
PYTHON := python3
MAIN = ${PYTHON_DIR}/main.py
ACTOR := ${ENV} ${PYTHON} ${MAIN} ${ARTICLES}


# ${PREFIX} represents the parent directory where the website is installed.
PREFIX=__PREFIX__


#############
# Interface #
#############


help: ## This help is printed.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "make %-30s %s\n", $$1, $$2}'


# Context
# Result
# Message
.PHONY: deps
deps:  ## TODO: All dependencies are installed.
	$(call objective, "TODO: All dependencies are installed.")
	npm install
	$(call result, "TODO.")


# Context
B1B1_ROBOTS_FILE := robots.txt
# Result
B1B1_ROBOTS := ${BUILD_DIR}/${B1B1_ROBOTS_FILE}
# Message
.PHONY: robots
robots: ${B1B1_ROBOTS} ## robots.txt is installed.
${B1B1_ROBOTS}: ${B1B1_ROBOTS_FILE}
	$(call objective, "robots.txt is installed.")
	cp $< $@
	$(call result, "$@")


# Context
E502_CNAME_FILE := CNAME
# Result
E502_CNAME := ${BUILD_DIR}/${E502_CNAME_FILE}
# Message
.PHONY: cname
cname: ${E502_CNAME} ## CNAME is installed.
${E502_CNAME}: ${E502_CNAME_FILE}
	$(call objective, "CNAME installed.")
	cp $< $@
	$(call result, "$@")


# Context
F809_MANIFEST_FILE := site.webmanifest
# Result
F809_MANIFEST := ${BUILD_DIR}/${F809_MANIFEST_FILE}
# Message
.PHONY: manifest
manifest: ${F809_MANIFEST} ## site.webmanifest is installed.
${F809_MANIFEST}: ${F809_MANIFEST_FILE}
	$(call objective, "site.manifest is installed.")
	cp $< $@
	$(call result, "$@")


# Context
BC1B_JS_DIR := ${JS_DIR}
# Result
# Message
.PHONY: code
code: ## All code is analysed, formatted and checked.
	$(call objective, "All code is analysed formatted and checked.")
	npx eslint --fix ${BC1B_JS_DIR}
	npx prettier . --write
	npx prettier . --check
	echo "TODO: do the same for python code."
	$(call result, "See above.")


# Context
B547_CSS_FILES := $(call list_files, ${CSS_DIR}, '*')
B547_BUILD_DIR := ${BUILD_DIR}/${CSS_DIR}
# Result
B547_CSS := ${B547_BUILD_DIR}/main.css
# Message
.PHONY: css
css: ${B547_CSS} ## The CSS source code is installed.
${B547_CSS}: ${B547_CSS_FILES}
	$(call objective, "The CSS source code is installed.")
	mkdir -p ${B547_BUILD_DIR}
	npx esbuild --bundle css/main.css --loader:.ttf=file --outfile=$@ --target=chrome58,edge16,firefox57,safari11
	$(call result, "See above.")


# Context
BF58_DIR := favicon
BF58_FILES := $(call list_files, ${BF58_DIR}, '*')
BF58_BUILD_DIR := ${BUILD_DIR}/${BF58_DIR}
BF58_BUILD_FILES := $(BF58_FILES:%=${BUILD_DIR}/%)
# Result
BF58_FAVICON := ${BF58_BUILD_DIR}
# Message
.PHONY: favicon
favicon: ${BF58_FAVICON} ## favicon directory is installed.
${BF58_FAVICON}: ${BF58_BUILD_FILES}
	$(call objective, "favicon directory is installed.")
	touch $@
	$(call result, "$@")
${BF58_BUILD_DIR}/%: ${BF58_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# Context
E915_FONT_DIR := ${FONT_DIR}
E915_FONT_DIR_FILES := $(call list_files, ${E915_FONT_DIR}, '*')
E915_BUILD_DIR := ${BUILD_DIR}/${E915_FONT_DIR}
E915_BUILD_DIR_FILES := $(E915_FONT_DIR_FILES:%=${BUILD_DIR}/%)
# Result
E915_FONT := ${E915_BUILD_DIR}
# Message
.PHONY: font
font: ${E915_FONT} ## Fonts are installed.
${E915_FONT}: ${E915_BUILD_DIR_FILES}
	$(call objective, "Font directory is installed.")
	touch $@
	$(call result, "$@")
${E915_BUILD_DIR}/%: ${E915_FONT_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# Context
E42A_DIR := ${JS_DIR}
E42A_DIR_FILES := $(call list_files, ${E42A_DIR}, '*')
E42A_MAIN := ${E42A_DIR}/main.js
# Result
E42A_JS := ${BUILD_DIR}/js/main.min.js
# Message
.PHONY: js
js: ${E42A_JS} ## The JavaScript code is installed.
${E42A_JS}: ${E42A_DIR_FILES}
	$(call objective, "JavaScript code is installed.")
	npx esbuild ${E42A_MAIN} --bundle --minify --sourcemap --outfile="$@"
	$(call result, "See above.")


# Context
CD6D_UUID := ${UUID}
CD6D_TEMPLATE := ${TEMPLATE}
CD6D_ARTICLE := ${ARTICLES}/${CD6D_UUID}
CD6D_FILES := $(call list_files, ${CD6D_ARTICLE}, '*')
CD6D_CTX := ${TEMPLATE} ${CD6D_FILES}
CD6D_ACTOR := ${ACTOR}
CD6D_PAGE_DIR := ${BUILD_DIR}/page
# Result
CD6D_PAGE := ${CD6D_PAGE_DIR}/${CD6D_UUID}/index.html
# Message
.PHONY: page
page: ${CD6D_PAGE}  ## UUID=$UUID. Page with id $UUID is installed.
${CD6D_PAGE}: ${CD6D_CTX}
	$(call objective, "Page with id ${UUID} is installed.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${CD6D_ACTOR} page ${CD6D_UUID} ${CD6D_TEMPLATE} ${CD6D_PAGE_DIR}
	$(call result, "See above.")


# Context
BDBC_TEMPLATE := ${TEMPLATE}
BDBC_FILES := $(call list_files, ${ARTICLES}, '*')
# Result
BDBC_ARTICLES := ${BUILD_DIR}/page
# Message
.PHONY: articles
articles: ${BDBC_ARTICLES}  ## All articles are installed.
${BDBC_ARTICLES}: ${BDBC_TEMPLATE} ${BDBC_FILES}
	$(call objective, "All articles are installed.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} pages ${BDBC_TEMPLATE} ${BDBC_ARTICLES} &>/dev/null
	touch "$@"
	$(call result, "$@")


# Context
FCBA_ARTICLES := ${BDBC_ARTICLES}
FCBA_UUID := ${INDEX_UUID}
# Result
FCBA_INDEX := ${FCBA_ARTICLES}/${FCBA_UUID}/index.html
# Message
.PHONY: index
index: ${FCBA_INDEX}  ## The index is built.
${FCBA_INDEX}: ${FCBA_ARTICLES}
	$(call objective, "Index of articles is built.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} index ${FCBA_ARTICLES} ${FCBA_UUID} &>/dev/null
	$(call result, "$@")


# Context
C2E3_FILES := $(call list_files, ${ARTICLES}, '*')
C2E3_BUILD := ${BUILD_DIR}
# Result
C2E3_SITEMAP := ${C2E3_BUILD}/sitemap.xml
# Message
.PHONY: sitemap
sitemap: ${C2E3_SITEMAP}  ## The sitemap is built.
${C2E3_SITEMAP}: ${C2E3_FILES}
	$(call objective, "Sitemap is built.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} sitemap ${C2E3_BUILD} &>/dev/null
	$(call result, "$@")


# Context
B972_ARTICLES := ${BDBC_ARTICLES}
B972_LANDING := page/00000000-0000-0000-0000-000000000000
B972_BUILD := ${BUILD_DIR}
# Result
# Message
.PHONY: landing
landing: ${B972_ARTICLES} ## The landing page is linked.
	$(call objective, "The landing page is linked.")
	ln -sndfv ${B972_LANDING}/bg.webp ${B972_BUILD}/bg.webp
	ln -sndfv ${B972_LANDING}/data ${B972_BUILD}/data
	ln -sndfv ${B972_LANDING}/index.html ${B972_BUILD}/index.html
	$(call result, "See above.")


# Context
# Result
# Message
.PHONY: duplicated-uuids
duplicated-uuids:  ## There are no duplicated uuids.
	$(call objective, "There are no duplicated uuids.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} duplicated-uuids &>/dev/null
	$(call result, "No duplicated uuids found.")


# all
# Context
F3BE_CTX := duplicated-uuids ${B1B1_ROBOTS} ${E502_CNAME}
F3BE_CTX += ${B547_CSS} ${BF58_FAVICON} ${E915_FONT}
F3BE_CTX += ${E42A_JS} ${C2E3_SITEMAP} ${F809_MANIFEST}
F3BE_CTX += ${BDBC_ARTICLES} ${FCBA_INDEX} landing
# Result
### Build the whole website.
# Message
.PHONY: all
all: ${F3BE_CTX} ## [ONCHANGE=true]. Build the website. If: ONCHANGE=true, then: rebuild on change.
	if [[ "${ONCHANGE}" == "true" ]]; then
		inotifywait -q -e create,modify,move,delete -r "$$PWD" -r ${ARTICLES}
		${MAKE} all ONCHANGE=true
	fi


# server
# Context
# Result
# Message
.PHONY: server
server: all ## Start a web server serving files from the current directory.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	cd ${BUILD_DIR}
	PYTHONPATH=${PYTHON_DIR} ${PYTHON} -m http.server


# new-actor
# Context
ACTOR_EXAMPLE_UUID := 101e3f53-f9e2-465a-a0e3-d0685b8e4f21
ACTOR_EXAMPLE := ${ARTICLES}/${ACTOR_EXAMPLE_UUID}
NEW_ACTOR_UUID := $(shell cat /proc/sys/kernel/random/uuid)
# Result
NEW_ACTOR := ${ARTICLES}/${NEW_ACTOR_UUID}
# Message
.PHONY: new-actor
new-actor: ## Add a new actor page.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} clone ${ACTOR_EXAMPLE} ${NEW_ACTOR} &>/dev/null


# new-article
# Context
DFBD_ARTICLE_TEMPLATE := template/article
DFBD_NEW_UUID := $(shell cat /proc/sys/kernel/random/uuid)
DFBD_ARTICLES := ${ARTICLES}
# Result
DFBD_NEW_ARTICLE := ${DFBD_ARTICLES}/${DFBD_NEW_UUID}
# Message
.PHONY: new-article
new-article: ## Build a new article.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} ${DFBD_ARTICLES} clone ${DFBD_ARTICLE_TEMPLATE} ${DFBD_NEW_ARTICLE} &>/dev/null


# list
# Context
# Result
# Message
.PHONY: list
list: ## List articles.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} list &>/dev/null


# doing
# Context
# Result
# Message
.PHONY: doing
doing: ## doing articles.
	rg -i '<x-doing>|state="doing"' ${ARTICLES}


# todo
# Context
# Result
# Message
.PHONY: todo
todo: ## todo articles.
	rg -i '<x-todo>|state="todo"' ${ARTICLES}


# delete
# Context
# Result
# Message
.PHONY: delete
delete: ## Delete a page with uuid UUID.
	rm -rvf ${PAGES}/${UUID}


# install
# Context
# Result
# Message
.PHONY: install
install: clean ## Install the website under ${PREFIX}.
	${MAKE} all
	cp -rvf ${BUILD_DIR}/* "${PREFIX}/"


# publish
# Context
# Result
# Message
.PHONY: publish
publish:  ## Publish the website.
	pushd ${PREFIX}
		if [[ -d .git ]]; then
			rm -rvf ./*
		else
			echo ".git is not a directory."
			echo "make sure PREFIX is configured correctly using ./configure"
			exit 1
		fi
	popd
	${MAKE} install
	pushd ${PREFIX}
		git add .
		git commit -a -m "published."
		git push
	popd


# links ${PAGE}
# Context
# Result
# Message
.PHONY: links
links:
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} links ${PAGE} &>/dev/null


# clean
# Context
# Result
# Message
.PHONY: clean
clean: ## Clean all generated files.
	$(call objective, "Remove all generated files.")	
	rm -rvf ${BUILD_DIR}
	$(call result, "See above.")
