# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

SHELL := bash
.SHELLFLAGS := -cxeuo pipefail
.ONESHELL:
.SILENT:
.SECONDEXPANSION:


# $(call list_files, glob, dir) â‰¡ files : List Path
define list_files
	$(shell fd -uu -t f -g $(2) $(1))
endef


# Where the source files of the pages are saved.
SOURCE=__SOURCE__


# The directory under which the website will be installed.
PREFIX=__PREFIX__


# Where the website is built.
BUILD_DIR := _build
$(shell mkdir -p ${BUILD_DIR})


help: ## This help.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "make %-30s %s\n", $$1, $$2}'


# deps
## Context
## Objective
## Rule
.PHONY: deps
deps:  ## TODO: Check and install dependencies.
	echo "TODO"
	npm install


# cname
## Context
CNAME := CNAME
## Objective
CNAME_FILE := ${BUILD_DIR}/CNAME
## Rule
.PHONY: cname
cname: ${CNAME_FILE} ## Install the CNAME under ${BUILD_DIR}.
${CNAME_FILE}: ${CNAME}
	cp $< $@


# manifest
## Context
MANIFEST := site.webmanifest
## Objective
MANIFEST_FILE := ${BUILD_DIR}/site.webmanifest
## Rule
.PHONY: manifest
manifest: ${MANIFEST_FILE} ## Install the webmanifest under ${BUILD_DIR}.
${MANIFEST_FILE}: ${MANIFEST}
	cp $< $@


# css
## Context
CSS_DIR := css
CSS_FILES := $(call list_files, ${CSS_DIR}, '*')
## Objective
CSS_OBJ := ${BUILD_DIR}/${CSS_DIR}/main.css
## Rule
.PHONY: css
css: ${CSS_OBJ} ## Install the css directory under ${BUILD_DIR}.
${CSS_OBJ}: ${CSS_FILES}
	mkdir -p ${BUILD_DIR}/${CSS_DIR}
	npx esbuild --bundle css/main.css --loader:.ttf=file --outfile=$@ --target=chrome58,edge16,firefox57,safari11


# favicon
## Context
FAVICON_DIR := favicon
FAVICON_FILES := $(call list_files, ${FAVICON_DIR}, '*')
## Objective
FAVICON_OBJ := $(FAVICON_FILES:%=${BUILD_DIR}/%)
## Rule
.PHONY: favicon
favicon: ${FAVICON_OBJ} ## Install the favicon directory under ${BUILD_DIR}.
${BUILD_DIR}/${FAVICON_DIR}/%: ${FAVICON_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# font
## Context
FONT_DIR := font
FONT_FILES := $(call list_files, ${FONT_DIR}, '*')
## Objective
FONT_OBJ := $(FONT_FILES:%=${BUILD_DIR}/%)
## Rule
.PHONY: font
font: ${FONT_OBJ} ## Install the font directory under ${BUILD_DIR}.
${BUILD_DIR}/${FONT_DIR}/%: ${FONT_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# js
## Context
JS_DIR := js
JS_MAIN_FILES := $(shell echo js/module/* js/main.js)
JS_BUILD_DIR := ${BUILD_DIR}/${JS_DIR}
## Objective
JS_OBJ := ${JS_BUILD_DIR}/main/main.min.js
## Rule
.PHONY: js
js: ${JS_OBJ} ## Intall the minified javascript under ${BUILD_DIR}.
${JS_OBJ}: ${JS_MAIN_FILES}
	npx esbuild ${JS_DIR}/main.js --bundle --minify --sourcemap  --outfile=${JS_BUILD_DIR}/main.min.js



# page ${UUID}
## Context
TEMPLATE := template.html
ARTICLES_DIR := ${SOURCE}
ARTICLE_DIR := ${ARTICLES_DIR}/${UUID}
ARTICLE_FILES := $(call list_files, ${ARTICLE_DIR}, '*')
LANG_FILE := ${ARTICLE_DIR}/lang
DATA_DIR := ${ARTICLE_DIR}/data
DESCRIPTION_FILE := ${ARTICLE_DIR}/description
ARTICLE_FILE := ${ARTICLE_DIR}/article.html
PAGE_CTX := ${TEMPLATE} ${ARTICLE_FILES}
PAGES := ${BUILD_DIR}/page
PAGE_DIR := ${PAGES}/${UUID}
## Objective
PAGE_FILE := ${PAGE_DIR}/index.html
## Rule
.PHONY: page
page: ${PAGE_FILE}  ## Install the page with UUID ${UUID} under ${BUILD_DIR}.
${PAGE_FILE}: ${PAGE_CTX}
	mkdir -p ${PAGE_DIR}
	cp -r ${DATA_DIR} ${PAGE_DIR}
	sed "s|__LANG__|$$(cat ${LANG_FILE})|g" ${TEMPLATE} > $@
	sed -i "s|__DESCRIPTION__|$$(cat ${DESCRIPTION_FILE})|g" $@
	SCRIPT=$$(cat <<'EOF'
	f = open("${ARTICLE_FILE}")
	article = f.read()
	f.close()
	f = open("$@", "r+")
	page = f.read()
	f.seek(0)
	page = page.replace("__ARTICLE__",article)
	f.write(page)
	f.close()
	EOF
	)
	python3 -c "$$SCRIPT"


# pages
## Context
LANDING_UUID=00000000-0000-0000-0000-000000000000
ARTICLES_DIRS := $(shell echo ${ARTICLES_DIR}/*)
## Objective
UUIDS := $(ARTICLES_DIRS:${ARTICLES_DIR}/%=%)
## Rule
.PHONY: all
all: ${CNAME_FILE} ${MANIFEST_FILE} ${CSS_OBJ} ${FAVICON_OBJ} ${FONT_OBJ} ${JS_OBJ} ## Build the website under ${BUILD_DIR}. If given ONCHANGE=true, then: rebuild on change.
	ARR=(${UUIDS})
	for uuid in "$${ARR[@]}"; do
		${MAKE} page UUID=$$uuid &
	done
	wait
	ln -sndf page/${LANDING_UUID}/data ${BUILD_DIR}/data
	ln -sndf page/${LANDING_UUID}/index.html ${BUILD_DIR}/index.html
	${MAKE} index
	if [[ "${ONCHANGE}" == "true" ]]; then
		inotifywait -q -e create,modify,move,delete -r "$$PWD" ${ARTICLES_DIR}
		${MAKE} all ONCHANGE=true
	fi


# index
## Context
INDEX_UUID=8e11bcd7-a050-40d6-ab93-71bee0640990
INDEX_DIR := ${PAGES}/${INDEX_UUID}
INDEX_RULE=python/index_rule.py
## Objective
INDEX_FILE := ${INDEX_DIR}/index.html
## Rule
.PHONY: index
index:  ## Build the index.
	python3 ${INDEX_RULE} ${INDEX_FILE} ${ARTICLES_DIR} "${UUIDS}"


# server
## Context
## Objective
## Rule
.PHONY: server
server: all ## Start a web server serving files from the current directory.
	cd ${BUILD_DIR}
	python3 -m http.server


# new
## Context
LANDING_ARTICLE := ${ARTICLES_DIR}/${LANDING_UUID}
NEW_UUID := $(shell cat /proc/sys/kernel/random/uuid)

## Objective
NEW_ARTICLE := ${ARTICLES_DIR}/${NEW_UUID}

## Rule
.PHONY: new
new: ## Add a new page.
	cp -r ${LANDING_ARTICLE} ${NEW_ARTICLE}
	echo ${NEW_ARTICLE}


# new-actor
## Context
ACTOR_MODEL := ${ARTICLES_DIR}/8960e1c9-07bc-406b-a993-02e7f87ac3b7
ACTOR_MODEL_UUID := 101e3f53-f9e2-465a-a0e3-d0685b8e4f21
NEW_ACTOR_UUID := $(shell cat /proc/sys/kernel/random/uuid)

## Objective
NEW_ARTICLE := ${ARTICLES_DIR}/${NEW_ACTOR_UUID}

## Rule
.PHONY: new-actor
new-actor: ## Add a new actor page.
	cp -r ${ACTOR_MODEL} ${NEW_ARTICLE}
	sed -i 's/101e3f53-f9e2-465a-a0e3-d0685b8e4f21/${NEW_ACTOR_UUID}/' ${NEW_ARTICLE}/article.html
	echo ${NEW_ARTICLE}


# list
## Context
## Objective
## Rule
.PHONY: list
list: ## List articles.
	PATHS=(${ARTICLES_DIRS})
	for path in $${PATHS[@]}; do
		desc=$$(cat $$path/description)
		echo "$$path/article.html  |  $$desc"
	done


# delete
## Context
## Objective
## Rule
.PHONY: delete
delete: ## Delete a page with uuid UUID.
	rm -rvf ${PAGES}/${UUID}


# install
## Context
## Objective
## Rule
.PHONY: install
install: clean ## Install the website under ${PREFIX}.
	${MAKE} all
	cp -rvf ${BUILD_DIR}/* "${PREFIX}/"


# publish
## Context
## Objective
## Rule
.PHONY: publish
publish:  ## Publish the website.
	pushd ${PREFIX}
		if [[ -d .git ]]; then
			rm -rvf ./*
		else
			echo ".git is not a directory."
			echo "make sure PREFIX is configured correctly using ./configure"
			exit 1
		fi
	popd
	${MAKE} install
	pushd ${PREFIX}
		git add .
		git commit -a -m "published."
		git push
	popd


# clean
## Context
## Objective
## Rule
.PHONY: clean
clean: ## Clean all generated files.
	rm -rvf ${BUILD_DIR}
