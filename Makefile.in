# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.



#########
# State #
#########


# Library

# $(call list_files,${dir},${regex}) is the list of files under ${dir} verifying ${regex} pattern.
define list_files
	$(shell fd -t f -g '$(2)' $(1))
endef

# $(call objective, $objective). Prints ${objective}.
define objective
	echo "┌─"
	echo "│objective: $(1)"
	echo "└─"
endef

# $(call result, $result) prints ${result}. Prints ${result}.
define result
	echo "┌─"
	echo "│result: $(1)"
	echo "└─"
endef


# Input is described

# ${ARTICLE} represents the parent directory of all articles.
ARTICLE := __SOURCE__

# ${ARTICLE_FILES} represents all files under ${ARTICLE}
ARTICLE_FILES := $(call list_files,${ARTICLE},*)

# ${INDEX_UUID} represents the uuid of the article in which articles are indexed.
INDEX_UUID := __INDEX_UUID__


# Output is descibed

# ${PREFIX} represents the parent directory where the website is installed.
PREFIX=__PREFIX__


# Resources are described

# ${TEMPLATE} represents the template where each article is included to form a webpage.
TEMPLATE := template.html

# ${FONT} represents the parent directory of all font source files.
FONT := font

# ${FONT_FILES} represents all files under ${FONT}
FONT_FILES := $(call list_files,${FONT},*)

# ${JS} represents the parent directory of all JS source files.
JS := js

# ${JS_FILES} represents all files under ${JS}
JS_FILES := $(call list_files,${JS},*)

# ${MODEL} represents the parent directory of all pages templates.
MODEL := model

# ${MODEL_FILES} represents all files under ${MODEL}
MODEL_FILES := $(call list_files,${MODEL},*)

# ${CSS} represents the parent directory of all CSS source files.
CSS := css

# ${CSS_FILES} represents all files under ${CSS}
CSS_FILES := $(call list_files,${CSS},*)

# see: https://developers.google.com/search/docs/crawling-indexing/robots/intro
ROBOTS := robots.txt

# see: https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site
CNAME := CNAME

# see: https://developer.mozilla.org/en-US/docs/Web/Manifest
MANIFEST := site.webmanifest

# see: https://developer.mozilla.org/en-US/docs/Glossary/Favicon
FAVICON := favicon

# ${FAVICON_FILES} represents all files under ${FAVICON}
FAVICON_FILES := $(call list_files,${FAVICON},*)

# see: https://docs.python.org/3/howto/logging.html#when-to-use-logging
LOGLEVEL := __LOGLEVEL__

# see: python/lib/actor.py
EXECUTION := __EXECUTION__

# ${ENV} represents environment variables used by the actor.
ENV := MYPYPATH=python PYTHONPATH=python EXECUTION=${EXECUTION} LOGLEVEL=${LOGLEVEL}

# ${INTERPRETER} represents the ... interpreter.
INTERPRETER := ${ENV} python3

# ${ACTOR} represents the actor to which this makefile send messages.
PYTHON := python
PYTHON_FILES := $(call list_files,${PYTHON},*)
MAIN_PY := ${PYTHON}/main.py
ACTOR := ${INTERPRETER} ${MAIN_PY} ${ARTICLE}

# ${BUILD} represents the parent directory where the website is built.
BUILD := _build
$(shell mkdir -p ${BUILD})


# ${LOG} represents the parent directory where the website is built.
LOG := _log
$(shell mkdir -p ${LOG})


# Makefile configuration

# All rules use Bash.
SHELL := bash

# One Bash process is started per rule.
.ONESHELL:

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
.SHELLFLAGS := -ceuo pipefail

# Make does not clog stdout.
.SILENT:

# https://www.gnu.org/software/make/manual/html_node/Secondary-Expansion.html
.SECONDEXPANSION:

# This makefile may use as much power as possible.
ifeq ($(EXECUTION), parallel)

# Use as many processors as possible.
MAKEFLAGS := --jobs=$(shell nproc)

# Logs make sens, even if jobs are parallelized.
MAKEFLAGS += --output-sync=recurse
endif



#############
# Interface #
#############

# Rule
#
# A rule is built as follow:
#   - It has an id like `DC49'.
#   - It has a name like `rule'.
#   - It has a context, if any.
#     - A context is a list of variables.
#     - Each variable has a name of the form `_$ID_$NAME', e.g. `_DC49_FILE'.
#       - The id is used to create a namespace.
#       - A value may only reference an exported variable i.e. does not start with `_'.
#  - It has a result, if any.
#    - A result is a variable of the form `$ID_$RULENAME', e.g. `DC49_RULE'
#  - It has instructions.
#     - A rule instructions may only read its context.
#
# Destroying a rule may break other rules, unless its output (if any) is not used.
#
# A rule named `rule' is used as follow: `make rule [$KEY=$VALUE …]'
#   - Where [$KEY=$VALUE …] is a sequence of parameters, if any.
#
# A `make rule [$KEY=$VALUE …]' may be interpreted as follow:
#   - "make received the message `rule [$KEY=$VALUE …]'".
#   - As a consequence, make will print which objective should it reach.
#   - If the objective is reached, then: it will give a proof that it has.
#   - else, it will crash and explain why.


# Context
# Result
# Rule
help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "make %-30s %s\n", $$1, $$2}'
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} help


# Rule
.PHONY: deps
deps:  ## TODO: All dependencies are installed.
	$(call objective, "TODO: All dependencies are installed.")
	npm install
	$(call result, "TODO.")


# Context
_B1B1_FILE := ${ROBOTS}
# Result
B1B1_ROBOTS := ${BUILD}/${_B1B1_FILE}
# Rule
.PHONY: robots
robots: ${B1B1_ROBOTS} ## robots.txt is installed.
${B1B1_ROBOTS}: ${_B1B1_FILE}
	$(call objective, "robots.txt is installed.")
	cp $< $@
	$(call result, "$@")


# Context
_E502_FILE := ${CNAME}
# Result
E502_CNAME := ${BUILD}/${_E502_FILE}
# Rule
.PHONY: cname
cname: ${E502_CNAME} ## CNAME is installed.
${E502_CNAME}: ${_E502_FILE}
	$(call objective, "CNAME installed.")
	cp $< $@
	$(call result, "$@")


# Context
_F809_FILE := ${MANIFEST}
# Result
F809_MANIFEST := ${BUILD}/${_F809_FILE}
# Rule
.PHONY: manifest
manifest: ${F809_MANIFEST} ## site.webmanifest is installed.
${F809_MANIFEST}: ${_F809_FILE}
	$(call objective, "site.manifest is installed.")
	cp $< $@
	$(call result, "$@")


# Context
_AFF0_DIR := ${PYTHON}
_AFF0_FILES := ${PYTHON_FILES}
# Result
AFF0_CODE_PYTHON := ${LOG}/python-code-analysis.txt
# Rule
.PHONY: code-python
code-python: ${AFF0_CODE_PYTHON}  ## Python code is analysed, formatted and checked.
${AFF0_CODE_PYTHON}: ${_AFF0_FILES}
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate

	$(call objective, "Python code is formatted.")
	${ENV} ruff format ${_AFF0_DIR} | tee "$@"
	$(call result, "See above.")

	$(call objective, "Python code is linted.")
	${ENV} ruff check --fix --select I ${_AFF0_DIR} | tee -a "$@"
	$(call result, "See above.")

	$(call objective, "Python code is typed checked.")
	${ENV} mypy --explicit-package-bases ${_AFF0_DIR} | tee -a "$@"
	$(call result, "See above.")

	$(call objective, "Python code security is checked.")
	${ENV} bandit -r ${_AFF0_DIR} | tee -a "$@"
	$(call result, "See above.")


# Context
_A739_DIR := ${JS}
_A739_FILES := ${JS_FILES}
# Result
A739_CODE_JS := ${LOG}/js-code-analysis.txt
# Rule
.PHONY: code-js
code-js: ${A739_CODE_JS}  ## JavaScript code is analysed, formatted and checked.
${A739_CODE_JS}: ${_A739_FILES}
	$(call objective, "JavaScript code is formatted.")
	npx prettier . --write | tee "$@"
	npx prettier . --check | tee -a "$@"
	$(call result, "See above.")

	$(call objective, "JavaScript style is linted.")
	npx eslint --fix ${_A739_DIR} | tee -a "$@"
	$(call result, "See above.")


# Rule
.PHONY: code
code: ${A739_CODE_JS} ${AFF0_CODE_PYTHON} ## All code is analysed, formatted and checked.


# Context
_B547_FILES := ${CSS_FILES}
_B547_BUILD := ${BUILD}/${CSS}
# Result
B547_CSS := ${_B547_BUILD}/main.css
# Rule
.PHONY: css
css: ${B547_CSS} ## The CSS source code is installed.
${B547_CSS}: ${_B547_FILES}
	$(call objective, "The CSS source code is installed.")
	mkdir -p ${_B547_BUILD}
	npx esbuild --bundle css/main.css --loader:.ttf=file --outfile=$@ --target=chrome58,edge16,firefox57,safari11
	$(call result, "See above.")


# Context
_BF58_DIR := ${FAVICON}
_BF58_BUILD := ${BUILD}/${_BF58_DIR}
_BF58_BUILD_FILES := $(FAVICON_FILES:%=${BUILD}/%)
# Result
BF58_FAVICON := ${_BF58_BUILD}
# Rule
.PHONY: favicon
favicon: ${BF58_FAVICON} ## favicon directory is installed.
${BF58_FAVICON}: ${_BF58_BUILD_FILES}
	$(call objective, "favicon directory is installed.")
	touch $@
	$(call result, "$@")
${_BF58_BUILD}/%: ${_BF58_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# Context
_E915_DIR := ${FONT}
_E915_BUILD := ${BUILD}/${_E915_DIR}
_E915_BUILD_FILES := $(FONT_FILES:%=${BUILD}/%)
# Result
E915_FONT := ${_E915_BUILD}
# Rule
.PHONY: font
font: ${E915_FONT} ## Fonts are installed.
${E915_FONT}: ${_E915_BUILD_FILES}
	$(call objective, "Font directory is installed.")
	touch $@
	$(call result, "$@")
${_E915_BUILD}/%: ${_E915_DIR}/%
	OUT="$@"
	OUT_DIR="$${OUT%/*}"
	mkdir -p "$${OUT_DIR}"
	cp $< $@


# Context
_E42A_DIR := ${JS}
_E42A_FILES := ${JS_FILES}
_E42A_MAIN := ${_E42A_DIR}/main.js
# Result
E42A_JS := ${BUILD}/js/main.min.js
# Rule
.PHONY: js
js: ${E42A_JS} ## The JavaScript code is installed.
${E42A_JS}: ${_E42A_FILES}
	$(call objective, "JavaScript code is installed.")
	npx esbuild ${_E42A_MAIN} --bundle --minify --sourcemap --outfile="$@"
	$(call result, "See above.")


# Context
_CD6D_UUID := ${UUID}
_CD6D_ARTICLE := ${ARTICLE}/${_CD6D_UUID}
_CD6D_FILES := $(call list_files,${_CD6D_ARTICLE},*)
_CD6D_TEMPLATE := ${TEMPLATE}
_CD6D_CTX := ${_CD6D_TEMPLATE} ${_CD6D_FILES}
_CD6D_ACTOR := ${ACTOR}
_CD6D_PAGE_DIR := ${BUILD}/page
_CD6D_ROOT := ${_CD6D_PAGE_DIR}/${_CD6D_UUID}
# Result
CD6D_PAGE := ${_CD6D_ROOT}/index.html
# Rule
.PHONY: page
page: ${CD6D_PAGE}  ## UUID=$UUID. Page with id $UUID is installed.
${CD6D_PAGE}: ${_CD6D_CTX}
	$(call objective, "Page with id ${UUID} is installed.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${_CD6D_ACTOR} page ${_CD6D_UUID} ${_CD6D_TEMPLATE} ${_CD6D_PAGE_DIR}
	$(call result, "See above.")


# Context
_BDBC_TEMPLATE := ${TEMPLATE}
_BDBC_FILES := ${ARTICLE_FILES}
# Result
BDBC_ARTICLE := ${BUILD}/page
# Rule
.PHONY: articles
articles: ${BDBC_ARTICLE}  ## All articles are installed.
${BDBC_ARTICLE}: ${_BDBC_TEMPLATE} ${_BDBC_FILES}
	$(call objective, "All articles are installed.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} pages ${_BDBC_TEMPLATE} ${BDBC_ARTICLE}
	touch "$@"
	$(call result, "$@")


# Context
_FCBA_ARTICLE := ${BDBC_ARTICLE}
_FCBA_UUID := ${INDEX_UUID}
# Result
FCBA_INDEX := ${_FCBA_ARTICLE}/${_FCBA_UUID}/index.html
# Rule
.PHONY: index
index: ${FCBA_INDEX}  ## The index is built.
${FCBA_INDEX}: ${_FCBA_ARTICLE}
	$(call objective, "Index of articles is built.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} index ${_FCBA_ARTICLE} ${_FCBA_UUID}
	$(call result, "$@")


# Context
_C2E3_FILES := ${ARTICLE_FILES}
_C2E3_BUILD := ${BUILD}
# Result
C2E3_SITEMAP := ${_C2E3_BUILD}/sitemap.xml
# Rule
.PHONY: sitemap
sitemap: ${C2E3_SITEMAP}  ## The sitemap is built.
${C2E3_SITEMAP}: ${_C2E3_FILES}
	$(call objective, "Sitemap is built.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} sitemap ${_C2E3_BUILD} &>/dev/null
	$(call result, "$@")


# Context
_B972_ARTICLE := ${BDBC_ARTICLE}
_B972_BUILD := ${BUILD}

# relative to ${BUILD}.
_B972_LANDING := page/00000000-0000-0000-0000-000000000000

# Result
# Rule
.PHONY: landing
landing: ${_B972_ARTICLE} ## The landing page is linked.
	$(call objective, "The landing page is linked.")
	ln -sndfv ${_B972_LANDING}/bg.webp ${_B972_BUILD}/bg.webp
	ln -sndfv ${_B972_LANDING}/data ${_B972_BUILD}/data
	ln -sndfv ${_B972_LANDING}/index.html ${_B972_BUILD}/index.html
	$(call result, "See above.")


# Rule
.PHONY: duplicated-uuids
duplicated-uuids:  ## There are no duplicated uuids.
	$(call objective, "There are no duplicated uuids.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} duplicated-uuids # &>/dev/null
	$(call result, "No duplicated uuids found.")


# Context
_F3BE_CTX := duplicated-uuids ${B1B1_ROBOTS} ${E502_CNAME}
_F3BE_CTX += ${B547_CSS} ${BF58_FAVICON} ${E915_FONT}
_F3BE_CTX += ${E42A_JS} ${C2E3_SITEMAP} ${F809_MANIFEST}
_F3BE_CTX += ${BDBC_ARTICLE} ${FCBA_INDEX} landing
# Result
F3BE_ALL := ${BUILD}
# Rule
.PHONY: all
all: ${F3BE_ALL} ## [ONCHANGE=true]. Build the website. If: ONCHANGE=true, then: rebuild on change.
${F3BE_ALL}: ${_F3BE_CTX}
	touch "$@"
	if [[ "${ONCHANGE}" == "true" ]]; then
		inotifywait -q -e create,modify,move,delete -r "$$PWD" -r ${ARTICLE}
		${MAKE} all ONCHANGE=true
	fi


# Rule
.PHONY: server
server: all ## Start a web server serving files from the current directory.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	cd ${BUILD}
	python3 -m http.server


# Context
_DFBD_MODEL := ${MODEL}/article
_DFBD_UUID := $(shell cat /proc/sys/kernel/random/uuid)
_DFBD_ARTICLE := ${ARTICLE}
# Result
DFBD_NEW_ARTICLE := ${_DFBD_ARTICLE}/${_DFBD_UUID}
# Rule
.PHONY: new-article
new-article: ## Build a new article.
	$(call objective, "Build a new article.")
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} clone ${_DFBD_MODEL} ${DFBD_NEW_ARTICLE}
	$(call result, "See above.")


# Rule
.PHONY: list
list: ## List articles.
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${ACTOR} list &>/dev/null


# Rule
.PHONY: doing
doing: ## doing articles.
	rg -i '<x-doing>|state="doing"' ${ARTICLE}


# Rule
.PHONY: todo
todo: ## todo articles.
	rg -i '<x-todo>|state="todo"' ${ARTICLE}


# Rule
.PHONY: delete
delete: ## Delete a page with uuid UUID.
	rm -rvf ${PAGES}/${UUID}


# Rule
.PHONY: install
install: ${F3BE_ALL} ## Install the website under ${PREFIX}.
	${MAKE} clean # else, some remaining content may be installed, e.g. if an article has been deleted in the meantime.
	${MAKE} all
	cp -rvf ${BUILD}/* "${PREFIX}/"


# Rule
.PHONY: publish
publish:  ## Publish the website.
	pushd ${PREFIX}
		if [[ -d .git ]]; then
			rm -rvf ./*
		else
			echo ".git is not a directory."
			echo "make sure PREFIX is configured correctly using ./configure"
			exit 1
		fi
	popd
	${MAKE} install
	pushd ${PREFIX}
		git add .
		git commit -a -m "published."
		git push
	popd


# Context
_5A6A_DIR := ${JS}
_5A6A_FILES := ${JS_FILES}
# Objective
5A6A_CODE_DOC_JS := _js_doc
# Rule
.PHONY: code-doc-js
code-doc-js:  ${5A6A_CODE_DOC_JS}  ## Build the JavaScript documentation.
${5A6A_CODE_DOC_JS}: ${_5A6A_FILES}
	npx jsdoc -c jsdoc.json
	touch "$@"


# Context
# Objective
# Rule
.PHONY: repl
repl:
	[[ ! -v VIRTUAL_ENV ]] && source _venv/bin/activate
	${INTERPRETER}


# Context
# Objective
# Rule
.PHONY: cloc
cloc:
	gocloc ${PYTHON} ${JS} ${CSS} ${MODEL}


# Rule
.PHONY: clean
clean: ## Clean all generated files.
	$(call objective, "Remove all generated files.")
	rm -rvf ${BUILD} ${LOG} ${5A6A_CODE_DOC_JS}
	$(call result, "See above.")
